<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSH的三种端口转发及应用</title>
      <link href="posts/3179/"/>
      <url>posts/3179/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="O、前言"><a href="#O、前言" class="headerlink" title="O、前言"></a>O、前言</h2><p>前几天在互联网冲浪的时候发现了一个好玩的东西：SSH 。在这之前，我以为 SSH 就单纯连接服务器用的，但看完文章我才发现，原来 SSH 这么好玩！！！</p><h2 id="一、三种端口转发"><a href="#一、三种端口转发" class="headerlink" title="一、三种端口转发"></a>一、三种端口转发</h2><p><code>SSH</code> 一共提供了3种端口转发，分别是 <code>本地转发（-L）</code>、<code>远程转发（-R）</code>、 <code>动态转发（-D）</code> 。接下来详细介绍三种端口转发食用方式。</p><h3 id="0、一些术语和约定"><a href="#0、一些术语和约定" class="headerlink" title="0、一些术语和约定"></a>0、一些术语和约定</h3><p>既然是转发，就要明白这是三台主机干的事情。（发送主机、转发主机、接收主机。）</p><p><code>本地主机</code> ： 发送主机，即当前使用的机器。形式为 IP 或域名。</p><p><code>远程主机</code> ： 转发主机，即远程用户名所在的主机。形式为 IP 或域名。</p><blockquote><p>注：远程主机 还可充当接收主机。比如要转发的服务就在远程主机上面。</p></blockquote><p>下文的命令格式参数部分略看：</p><p><code>SSH -[] [发送主机：]发送主机端口：接收主机：接收主机端口 转发主机用户名@转发主机</code></p><p>命令执行打开的窗口不能关闭，否则转发一起失效。</p><h3 id="1、本地转发（-L）"><a href="#1、本地转发（-L）" class="headerlink" title="1、本地转发（-L）"></a>1、本地转发（-L）</h3><blockquote><p>访问本地主机端口时，将访问请求转发到远程服务上去。</p></blockquote><p>格式：<code>SSH -L [本地主机：]本地主机端口：远程主机：远程主机端口 远程用户名@远程主机地址</code> 。</p><p>举例：<code>SSH -L 8080:127.0.0.1:80 root@example.com</code> 。</p><p>解释：将 <code>example.com</code> 主机中的 <code>127.0.0.1:80</code> 服务映射到本地主机的 8080 端口。</p><p>验证：在远程主机上开启 80 端口服务，本地主机不做操作，本地主机执行上述命令。此时，访问 <code>http://127.0.0.1:8080</code> 等同于访问 <code>example.com</code> 主机中的 <code>http://127.0.0.1:80</code> 。</p><p>应用：</p><ul><li>本地调试远程服务</li><li>访问受限环境的某个服务 （远程主机中 <code>mysql</code> 服务端不开放外网访问的情况下，在本地主机直接连接 <code>mysql</code> 服务）</li></ul><h3 id="2、远程转发（-R）"><a href="#2、远程转发（-R）" class="headerlink" title="2、远程转发（-R）"></a>2、远程转发（-R）</h3><blockquote><p>访问远程主机端口时，远程主机将访问请求转发到本地主机服务上。</p></blockquote><p>格式：<code>SSH -R [远程主机：]远程主机端口：本地主机：本地主机端口 远程用户名@远程主机地址</code> 。</p><p>举例：<code>SSH -R 80:127.0.0.1:8080 root@example.com</code> 。</p><p>解释：将本地的 8080 端口服务映射到 <code>example.com</code> 主机中的 <code>localhost:80</code> 端口。</p><p>验证：在本地主机开启 8080 端口服务，远程主机不做操作，本地主机执行上述命令。此时，访问 <code>http://example.com</code> 等同于访问本地主机中的 <code>http://127.0.0.1:8080</code> 。</p><p>应用：</p><ul><li>让远程主机能够通过本地主机的某个代理访问到外网。（服务器访问 GitHub 都是泪）</li><li>将本地开发的应用映射到有公网 IP 的远程主机，实现外网访问内网的应用。（内网穿透）</li></ul><p><strong>注意： 要实现远程转发需要在远程主机上配置一些信息</strong></p><ul><li><code>/etc/ssh/sshd_config</code> 中把 <code>AllowTcoForwarding</code> 选项设置为 <code>yes</code></li><li><code>/etc/sysctl.conf</code> 中把 <code>net.ipv4.ip_forward</code> 设置为 <code>1</code></li></ul><p><em><strong>多说一点：</strong></em></p><p>默认转发到远程主机绑定的是 <code>127.0.0.1</code> ，也就是只能本机访问。</p><p>在 <code>/etc/ssh/sshd_config</code> 中把 <code>GatewayPorts</code> 设置为 <code>yes</code> ，就会绑定到 <code>0.0.0.0</code> 。</p><blockquote><p>如果没有修改权限，办法也比困难多：</p><p>本地主机执行： <code>SSH -R 80:127.0.0.1:8080 root@example.com</code></p><p>远程主机执行： <code>SSH -L 0.0.0.0:8080:127.0.0.1:8080 root@127.0.0.1</code></p><hr><p>有没有一种可能，一条命令就行：<code>SSH -R 0.0.0.0:80:127.0.0.1:8080 root@example.com</code></p></blockquote><h3 id="3、动态转发（-D）"><a href="#3、动态转发（-D）" class="headerlink" title="3、动态转发（-D）"></a>3、动态转发（-D）</h3><blockquote><p>本地转发和动态转发都是针对单一端口转发，而动态转发不受端口限制。换言之，一些没有端口号的应用，比如浏览器等就能使用了。</p></blockquote><p>格式：<code>SSH -D [本地主机：]本地主机端口 远程用户名@远程主机地址</code> 。</p><p>举例：<code>SSH -D 50000 user@example.com</code> 。</p><p>解释：该命令创建一个 <code>SOCKS</code> 代理，通过该代理发出的数据包都经过 <code>example.com</code> 转发出去。</p><p>验证：远程主机不做操作，本地主机执行上述命令。</p><ul><li>浏览器：在本地主机浏览器中设置使用 <code>SOCKS</code> 代理 <code>127.0.0.1:50000</code> ，然后浏览器就能访问 <code>example.com</code> 中任何 IP 或服务。</li><li>终端：<code>export http_proxy=&quot;socks5://127.0.0.1:50000&quot;</code> , <code>export https_proxy=&quot;socks5://127.0.0.1:50000&quot;</code></li><li>SSH：<code>ssh -o ProxyCommand=&#39;/usr/bin/nc -X 5 -x 127.0.0.1:5000 %h %p&#39; user@host2</code> 未验证。</li></ul><p>应用：</p><ul><li>访问受限网络中的多种服务</li><li>FQ</li></ul><h2 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h2><p>知识虽小却有大用处。解决了我的一些痛点：</p><ul><li>想在本地直接连接服务器的数据库，但是又不想暴露数据库到外网。</li><li>在服务器上下载 GitHub 代码一言难尽，以前都是先本地下载，再上传到服务器。</li><li>本地部署，外网临时访问。其实就是内网穿透。</li></ul><p>参考：</p><ul><li><p><a href="https://juejin.cn/post/7187336694880796733?share_token=85c9424d-414e-4822-85d7-85487bf584c4">我挖了一条网络隧道，差点被公司激活！555</a></p></li><li><p><a href="https://jeremyxu2010.github.io/2018/12/ssh%E7%9A%84%E4%B8%89%E7%A7%8D%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/">SSH的三种端口转发</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 好玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> 转发 </tag>
            
            <tag> 好玩的 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站评论区抽奖脚本</title>
      <link href="posts/8c2d/"/>
      <url>posts/8c2d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h2><p>在逛B站的时候，看到有个UP主准备都在动态抽一些幸运儿，交代了上下文顺便问了句 “话说，谁知道怎么抽奖？”。话都说到这份上了，那我还能坐得住？？？立马打开我的 <code>VSCODE</code> 撸了串代码。。。一切从简，不考虑油猴了</p><h2 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h2><ol><li>打开动态页面或者视频页，按 <code>F12</code> 打开 <code>开发者工具</code> 并切换到 <code>console</code> 选项卡。</li><li>将下方代码粘贴到 <code>console</code> 中并回车运行。</li><li>根据提示操作即可。</li></ol><p>效果图如图所示：</p><img src= "/img/loading.gif" data-lazy-src="/posts/8c2d/image-20221029235646004-16670590085001.png" class="" title="image-20221029235646004"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> auto = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> mode = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userList = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> luckyNumber = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">let</span> luckyDogList = [];</span><br><span class="line"><span class="keyword">let</span> levelUserList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> interval = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">let</span> commentNum = getCommentNum();</span><br><span class="line"><span class="keyword">let</span> commentCurPage = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wait = <span class="keyword">async</span> delay =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delay));</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCommentNum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> domain = <span class="built_in">window</span>.location.href;</span><br><span class="line">mode = domain.includes(<span class="string">&#x27;t.bilibili.com&#x27;</span>) ? <span class="string">&#x27;dynamic&#x27;</span> : domain.includes(<span class="string">&#x27;bilibili.com/video/&#x27;</span>) ? <span class="string">&#x27;video&#x27;</span> : <span class="string">&#x27;other&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> className = domain.includes(<span class="string">&#x27;t.bilibili.com&#x27;</span>) ? <span class="string">&#x27;comment&#x27;</span> : <span class="string">&#x27;total-reply&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> commentRaw = <span class="built_in">document</span>.getElementsByClassName(className)[<span class="number">0</span>].textContent;</span><br><span class="line"><span class="keyword">if</span> (commentRaw.includes(<span class="string">&#x27;万&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10000</span> * <span class="built_in">parseInt</span>(commentRaw.replace(<span class="regexp">/[^0-9]/</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(commentRaw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getMoreComment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> curNum = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.con&#x27;</span>).length || <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.reply-item&#x27;</span>).length || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> nextNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!curNum) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;获取评论失败&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (curNum !== nextNum) &#123;</span><br><span class="line">curNum = nextNum;</span><br><span class="line"><span class="keyword">await</span> wait(interval);</span><br><span class="line"><span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="number">1920</span> * commentNum); <span class="comment">// ?</span></span><br><span class="line">print(<span class="string">&#x27;已加载 &#x27;</span> + (commentCurPage++) + <span class="string">&#x27; 页数据&#x27;</span>, <span class="string">&#x27;font-size: 20px;color: #f5b689;font-weight: bold&#x27;</span>);</span><br><span class="line">nextNum = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.con&#x27;</span>).length || <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.reply-item&#x27;</span>).length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getValidUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (mode === <span class="string">&#x27;dynamic&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> commentList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.list-item.reply-wrap&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> comment <span class="keyword">of</span> commentList) &#123;</span><br><span class="line"><span class="keyword">let</span> node = comment.querySelector(<span class="string">&#x27;.con&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> name = node.querySelector(<span class="string">&#x27;.user &gt; a&#x27;</span>).textContent;</span><br><span class="line"><span class="keyword">let</span> id = node.querySelector(<span class="string">&#x27;.user &gt; a&#x27;</span>).getAttribute(<span class="string">&#x27;data-usercard-mid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> level = node.querySelector(<span class="string">&#x27;img.level&#x27;</span>).src.match(<span class="regexp">/level_\d/gm</span>)[<span class="number">0</span>].replace(<span class="regexp">/[^0-9]/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> content = node.querySelector(<span class="string">&#x27;.text&#x27;</span>).textContent;</span><br><span class="line">userList.set(id, &#123; id, name, level, content, comment &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mode === <span class="string">&#x27;video&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> commentList = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.reply-item&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> comment <span class="keyword">of</span> commentList) &#123;</span><br><span class="line"><span class="keyword">let</span> node = comment.querySelector(<span class="string">&#x27;.content-warp&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> name = node.querySelector(<span class="string">&#x27;.user-name&#x27;</span>).textContent;</span><br><span class="line"><span class="keyword">let</span> id = node.querySelector(<span class="string">&#x27;.user-name&#x27;</span>).getAttribute(<span class="string">&#x27;data-user-id&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> level = node.querySelector(<span class="string">&#x27;i.user-level&#x27;</span>).className.match(<span class="regexp">/level-\d/gm</span>)?.[<span class="number">0</span>].replace(<span class="regexp">/[^0-9]/g</span>, <span class="string">&#x27;&#x27;</span>) || <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> content = node.querySelector(<span class="string">&#x27;.reply-content.root-reply&#x27;</span>).textContent;</span><br><span class="line">userList.set(id, &#123; id, name, level, content, comment &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;这是啥子页面哦，没见过~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">&#x27;数据全部加载完毕&#x27;</span>, <span class="string">&#x27;font-size: 20px;color: white;background-color: #00a0d8;border-radius: 3px;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">roll</span>(<span class="params">num, level</span>) </span>&#123;</span><br><span class="line"><span class="comment">// roll(1) 表示抽取 1 位</span></span><br><span class="line"><span class="keyword">await</span> wait(interval);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (level &lt; <span class="number">0</span> || level &gt; <span class="number">6</span>) &#123;</span><br><span class="line">print(<span class="string">&#x27;今夕是何年？B站都有这等级的人了？&#x27;</span>);</span><br><span class="line">level = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newUserList = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (level) &#123;</span><br><span class="line"><span class="keyword">let</span> iterator = userList.entries();</span><br><span class="line">newUserList = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> item = iterator.next().value;</span><br><span class="line"><span class="keyword">if</span> (!item) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">parseInt</span>(item[<span class="number">1</span>].level) &gt;= num) &#123;</span><br><span class="line">newUserList.set(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">newUserList = userList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &lt; <span class="number">0</span> || num &gt; newUserList.size) &#123;</span><br><span class="line">print(<span class="string">&#x27;抽奖人数不对劲，给你改成抽一个人了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (newUserList.size === <span class="number">0</span>) &#123;</span><br><span class="line">print(<span class="string">&#x27;搁这抽空气呢？没人了&#x27;</span>, <span class="string">&#x27;font-size: 20px;color: green&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (luckyNumber.size &lt; num) &#123;</span><br><span class="line">luckyNumber.add(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * newUserList.size));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;随机抽取完成，已标记...&#x27;</span>, <span class="string">&#x27;font-size: 20px;color: white;background-color: #00a0d8;border-radius: 3px;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> showLuckyDog(newUserList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">showLuckyDog</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> ids = <span class="built_in">Array</span>.from(list.keys());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> luckyNumber) &#123;</span><br><span class="line"><span class="keyword">let</span> luckyDog = list.get(ids[number]);</span><br><span class="line"><span class="keyword">let</span> follow = <span class="keyword">await</span> getFollowed(luckyDog.id);</span><br><span class="line">luckyDogList.push(&#123;</span><br><span class="line"><span class="string">&#x27;用户ID&#x27;</span>: luckyDog.id,</span><br><span class="line"><span class="string">&#x27;用户名&#x27;</span>: luckyDog.name,</span><br><span class="line"><span class="string">&#x27;用户等级&#x27;</span>: luckyDog.level,</span><br><span class="line"><span class="string">&#x27;评论内容&#x27;</span>: luckyDog.content,</span><br><span class="line"><span class="string">&#x27;是否关注我&#x27;</span>: follow || <span class="string">&#x27;获取失败&#x27;</span> </span><br><span class="line">&#125;);</span><br><span class="line">luckyDog.comment.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;background-color: #c1dff8&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.table(luckyDogList, [<span class="string">&#x27;用户ID&#x27;</span>, <span class="string">&#x27;用户名&#x27;</span>, <span class="string">&#x27;用户等级&#x27;</span>, <span class="string">&#x27;是否关注我&#x27;</span>]);</span><br><span class="line">luckyNumber.clear();</span><br><span class="line">luckyDogList = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getFollowed</span>(<span class="params">uid</span>) </span>&#123;</span><br><span class="line"><span class="keyword">await</span> wait(<span class="number">250</span>);</span><br><span class="line"><span class="keyword">const</span> relationRes = <span class="keyword">await</span> fetch(<span class="string">&#x27;https://api.bilibili.com/x/space/acc/relation?mid=&#x27;</span> + uid, &#123;</span><br><span class="line">    credentials: <span class="string">&#x27;include&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json());</span><br><span class="line"><span class="keyword">if</span> (relationRes.code !== <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&#x27;获取失败&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> relation = relationRes.data.be_relation;</span><br><span class="line"><span class="keyword">let</span> followed = relation.attribute !== <span class="literal">undefined</span> &amp;&amp; relation.attribute !== <span class="number">0</span> &amp;&amp; relation.attribute !== <span class="number">128</span>;</span><br><span class="line"><span class="keyword">return</span> followed ? <span class="string">&#x27;已关注&#x27;</span> : <span class="string">&#x27;未关注&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">msg, style</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (style) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%c&#x27;</span> + msg, <span class="string">&#x27;padding: 5px 5px;&#x27;</span> + style);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">print(<span class="string">&#x27;代码运行中...&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> wait(interval);</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> getMoreComment();</span><br><span class="line"><span class="keyword">await</span> getValidUser();</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;键入 roll(2) 抽取 2 位用户\t\t\t\t\t\t\t\n键入 roll(1, 4) 抽取 1 位 4 级及以上的用户，以此类推\t&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;width: 100%;font-size: 20px; color: white; background: linear-gradient(270deg,#fad7a1,#e96d71);border-radius: 2px&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (auto) &#123;</span><br><span class="line">print(<span class="string">&#x27;为你自动抽取一人&#x27;</span>, <span class="string">&#x27;font-size: 20px;color: #ccc;&#x27;</span>);</span><br><span class="line">roll(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><h2 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h2><h3 id="1、动态页或视频页"><a href="#1、动态页或视频页" class="headerlink" title="1、动态页或视频页"></a>1、动态页或视频页</h3><p>直接根据 <code>window.location.href</code> 判断是何种页面，然后走不同的页面解析流程即可。</p><h3 id="2、自动翻页获取所有评论"><a href="#2、自动翻页获取所有评论" class="headerlink" title="2、自动翻页获取所有评论"></a>2、自动翻页获取所有评论</h3><p>最开始的想法是获取到评论总数 <code>commentNum</code>，然后再获取当前页面的顶级评论数 <code>curCommentNum</code>，如果 <code>commentNum !== curCommentNum</code> 说明评论数未获取完毕，则将页面继续向下滚动（加载评论数据），直到满足 <code>commentNum === curCommentNum</code> 。</p><p>但在后面的实施过程中，屡次出现下滑页面的死循环，仔细思考过后才明白：由于存在子评论，所以评论总数和顶级评论数的关系只能是 <code>commentNum &gt;= curCommentNum</code> ，而绝大多数都会存在子评论，之前的实现方式是完全错误的。</p><p>所以后面修改翻页逻辑：先记录当前页的评论数量 <code>curNum</code> ,  翻页后再统计当前的评论数量 <code>nextNum</code> , 如果 <code>curNum !== nextNum</code> 说明新增了一些评论数据，则继续向下翻页；如果 <code>curName === nextNum</code> 说明没有新增评论数据了，即评论获取完毕。</p><h3 id="3、获取评论用户信息"><a href="#3、获取评论用户信息" class="headerlink" title="3、获取评论用户信息"></a>3、获取评论用户信息</h3><p>这个直接在 <code>html</code> 中提取就行了。</p><p>建立一个 <code>Map</code> 变量 <code>userList</code> ，以用户的 <code>uid</code> 作为键，用户的各项信息作为值。遍历每一条评论时，获取用户信息存入 <code>userList</code> ，这样就保证了每个用户的只会存在一次。评论多次的用户，最终都会被最后一条评论覆盖。</p><h3 id="4、抽取的随机数"><a href="#4、抽取的随机数" class="headerlink" title="4、抽取的随机数"></a>4、抽取的随机数</h3><p>首先获取到抽取的人数 <code>num</code> ，再新建一个 <code>Set</code> 变量 <code>luckyNumber</code> 用来存放生成的随机数，<code>Set</code> 集合能保证一个数只会出现一次。通过 <code>while (luckyNumber.size &lt; num)</code> 来不断加入不同的随机数，数量满足时就会跳出循环。</p><h3 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h3><p>获取 <code>是否关注我</code> 的 <code>API</code> ： <a href="https://github.com/SocialSisterYi/bilibili-API-collect/blob/master/user/relation.md#%E6%9F%A5%E8%AF%A2%E7%94%A8%E6%88%B7%E4%B8%8E%E8%87%AA%E5%B7%B1%E5%85%B3%E7%B3%BB_%E4%BA%92%E7%9B%B8">查询用户与自己关系_互相</a></p><p><code>console.log</code> 花样：略</p><p><code>fetch</code> 携带 <code>cookies</code> ：<code>credentials: &#39;include&#39;</code> </p><h2 id="三、改进"><a href="#三、改进" class="headerlink" title="三、改进"></a>三、改进</h2><p>最近看到一些其他的抽奖脚本，比我这个好看多了。等有时间 “借鉴” 一下，更新在这里。</p>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Windows右键菜单</title>
      <link href="posts/1842/"/>
      <url>posts/1842/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h2><p>Windows 的右键菜单在日常生活中发挥了不小的作用。合理的时候带给我们的是便捷，被污染的时候带给我们的是噩梦，它会绑上一些没有必要的功能，不仅会拖慢右键菜单打开的速度，而且让我们强迫症无法忍受。</p><p>但是今天不是来介绍怎么清理右键菜单的，而是合理利用右键菜单，即是将一些命令行程序集成到右键菜单，生产力提升了！(UP!)</p><h2 id="一、示例"><a href="#一、示例" class="headerlink" title="一、示例"></a>一、示例</h2><p>(略)</p><h2 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h2><h3 id="1-通用型"><a href="#1-通用型" class="headerlink" title="1. 通用型"></a>1. 通用型</h3><p>​    <code>Win + R</code> 输入 <code>regedit</code> 打开注册表，进入如下地址：<code>计算机\HKEY_CLASSES_ROOT\*\shell</code> </p><p>在 <code>shell</code> 目录下新建 <strong>项</strong> ，命名为 <code>用Chrome打开</code>。</p><img src= "/img/loading.gif" data-lazy-src="/posts/1842/image-20220330221823815-16486499065441.png" class="" title="image-20220330221823815"><p>在刚刚建的 <strong>项</strong> 上再创建一个 <strong>项</strong> 并命名为 “command”。</p><img src= "/img/loading.gif" data-lazy-src="/posts/1842/image-20220330222920470-16486505622103.png" class="" title="image-20220330222920470"><p>双击右侧区域中的唯一选项，在数据值选项中填入 <code>chrome.exe &quot;%1&quot;</code>  并确认。</p><blockquote><p>%1 表示所选择文件的地址</p></blockquote><p>搞定！</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>随便右键一个文件，点击我们注册的名称，就会用 Chrome 打开选中的文件了。</p><img src= "/img/loading.gif" data-lazy-src="/posts/1842/image-20220330223339224-16486508211674.png" class="" title="image-20220330223339224"><h3 id="2、专注型"><a href="#2、专注型" class="headerlink" title="2、专注型"></a>2、专注型</h3><blockquote><p>做了上面的通用型，我们发现有点不方便。因为每一个文件右键都会出现 <code>用Chrome打开</code>，但是有些文件谷歌浏览器是打不开的。</p><p>也就是说没必要所有文件右键都有这个功能。所以，我们接下来就改造一下，只让特定的文件生效。</p><p>此处以 增强 <code>jpg</code> 图片为例子。</p></blockquote><p>打开注册表，打开如下地址：<code>计算机\HKEY_CLASSES_ROOT\SystemFileAssociations</code> , 找到你想要的特定文件后缀名，此处我选择 <code>.jpg</code> 。</p><p>右键 <code>.jpg</code> 下的 <code>Shell（没有就手动创建）</code> ，新建项并命名为 <code>Enhance</code> ，在 <code>Enhance</code> 下面创建<strong>项</strong>并命名为 <code>command</code> 。（此操作步骤同上）</p><p>双击右侧区域中的唯一选项，在数据值选项中填入 <code>E:\Program\img-clear\realesrgan-ncnn-vulkan.exe -i &quot;%1&quot; -o output.png</code>  并确认。</p><blockquote><p> 这是一个开源的图片增强工具，以上命令是按照其格式调用。</p></blockquote><img src= "/img/loading.gif" data-lazy-src="/posts/1842/image-20220330230748997-16486528705156.png" class="" title="image-20220330230748997"><p>搞定！</p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>右键一张 <code>jpg</code> 格式的图片，并点击 <code>Enhance</code> ，此时预定的程序就会执行。</p><p>执行完毕后，同目录下就会出现已经增强图片 <code>output.png</code> ，这是程序作用的结果。</p><img src= "/img/loading.gif" data-lazy-src="/posts/1842/image-20220330225757922-16486522814345.png" class="" title="image-20220330225757922"><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学会了 Windows 右键菜单的简单注册，并实现了一些较为便捷的指令。</p><p>更多好玩的操作，还得看广大网友！</p>]]></content>
      
      
      <categories>
          
          <category> 技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技巧 </tag>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下踩过ES的坑</title>
      <link href="posts/6881/"/>
      <url>posts/6881/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="〇、前言"><a href="#〇、前言" class="headerlink" title="〇、前言"></a>〇、前言</h2><p>学习的过程中提到了 <code>Elasticsearch</code> ，便下载安装。遇到了不少小插曲，记录之。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p><a href="https://www.elastic.co/cn/downloads/elasticsearch">下载</a> 后解压到指定目录。</p><p><code>bin</code> 中包含很多执行文件，直接运行 <code>elasticsearch.bat</code> 即可。</p><h2 id="一、处理过程"><a href="#一、处理过程" class="headerlink" title="一、处理过程"></a>一、处理过程</h2><h3 id="1、权限不够"><a href="#1、权限不够" class="headerlink" title="1、权限不够"></a>1、权限不够</h3><p>双击 <code>elasticsearch.bat</code> 后，窗口一闪而过。</p><p>为了确定是什么问题，采用命令行来执行此执行文件。</p><p>图片（略）</p><p>发现是权限不够。</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>给根目录文件夹给予完全控制的权限。</p><h3 id="2、无法访问9200端口"><a href="#2、无法访问9200端口" class="headerlink" title="2、无法访问9200端口"></a>2、无法访问9200端口</h3><p><code>elasticsearch.bat</code> 运行成功后，会给出如下提示：</p><img src= "/img/loading.gif" data-lazy-src="/posts/6881/image-20220328164848671-16484573322271.png" class="" title="image-20220328164848671"><p>说明已经运行成功。此时打开浏览器访问 <a href="http://localhost:9200/">http://localhost:9200</a> ，得到如下结果：</p><img src= "/img/loading.gif" data-lazy-src="/posts/6881/image-20220328165049935-16484574525172.png" class="" title="image-20220328165049935"><h4 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h4><p>打开 <code>config/elasticsearch.yml</code> ，找到 <code>xpack.security.http.ssl.enabled</code> 属性，将其值改为 <code>false</code> 。</p><h3 id="3、访问9200端口需要账号密码"><a href="#3、访问9200端口需要账号密码" class="headerlink" title="3、访问9200端口需要账号密码"></a>3、访问9200端口需要账号密码</h3><p>继上一个问题解决后，访问 <code>9200</code> 端口需要密码。可我们是新手，哪来的啥密码。</p><img src= "/img/loading.gif" data-lazy-src="/posts/6881/image-20220328165549954-16484577524573.png" class="" title="image-20220328165549954"><h4 id="解决办法-2"><a href="#解决办法-2" class="headerlink" title="解决办法"></a>解决办法</h4><p>打开 <code>config/elasticsearch.yml</code> ，找到 <code>xpack.security.enabled</code> 属性，将其值改为 <code>false</code> 。</p><h2 id="二、最终结果"><a href="#二、最终结果" class="headerlink" title="二、最终结果"></a>二、最终结果</h2><p>重启 <code>elasticsearch.bat</code> ，访问 <a href="http://localhost:9200/">http://localhost:9200</a> ，得到如下类似结果说明问题解决。</p><img src= "/img/loading.gif" data-lazy-src="/posts/6881/image-20220328170138331-16484581009344.png" class="" title="image-20220328170138331"><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> ES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批处理语法纪实</title>
      <link href="posts/c7fc/"/>
      <url>posts/c7fc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="批处理语法纪实"><a href="#批处理语法纪实" class="headerlink" title="批处理语法纪实"></a>批处理语法纪实</h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set A&#x3D;hello world</span><br></pre></td></tr></table></figure><p>将<code>hello world</code>赋值给变量A</p><p>参数：</p><ul><li><p>/A 后面的赋值语句为简单的数值运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set &#x2F;a num&#x3D;1+1</span><br></pre></td></tr></table></figure></li><li><p>/P 后面的语句作为提示用户语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set &#x2F;p file&#x3D;input filename:</span><br></pre></td></tr></table></figure><p>用户可以在窗口中输入</p></li></ul><h2 id="2-if"><a href="#2-if" class="headerlink" title="2.if"></a>2.if</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (condition) do_something</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if exist person.txt echo file exist</span><br></pre></td></tr></table></figure><p>如果 <code>person.txt</code> 存在，则显示 <code>file exist</code> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if %num% &#x3D;&#x3D; 2 (echo value&#x3D;2) else (echo value!&#x3D;2)</span><br></pre></td></tr></table></figure><p>如果变量 <code>num</code> 的值为 <code>2</code> ，显示 <code>value=2</code> , 否则显示 <code>value!=2</code> .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if %string%&#x3D;&#x3D;String1 (echo String1) else (</span><br><span class="line">if %string%&#x3D;&#x3D;String2 (echo String2) else (</span><br><span class="line">if %string%&#x3D;&#x3D;String3 (echo String3)</span><br><span class="line">)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-for"><a href="#3-for" class="headerlink" title="3.for"></a>3.for</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %%variable in (list) do do_something</span><br></pre></td></tr></table></figure><p><strong>注：在 <code>.bat</code> 文件中，循环变量为 <code>%%variable</code> 。在 <code>cmd</code> 中，循环变量写为 <code>%variable</code></strong> 。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %%I in (1, 2, 3, 4, 5) do echo %%I</span><br></pre></td></tr></table></figure><p>输入为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for %%I in (*.txt) do echo %%I</span><br></pre></td></tr></table></figure><p>遍历当前目录下所有以 <code>.txt</code> 结尾的文件，并逐个显示到屏幕</p><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.txt</span><br><span class="line">b.txt</span><br><span class="line">c.txt</span><br></pre></td></tr></table></figure><hr><h3 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h3><p>参数：</p><ul><li><p>/F        for 语句最常用的、也是最强的命令。主要用来处理文件和一些命令的输出结果。它可以提取文本文件的内容，进行逐行分析和处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FOR &#x2F;F [&quot;options&quot;] %variable IN (file-set) DO command [command-parameters]</span><br><span class="line">FOR &#x2F;F [&quot;options&quot;] %variable IN (&quot;string&quot;) DO command [command-parameters]</span><br><span class="line">FOR &#x2F;F [&quot;options&quot;] %variable IN (&#39;command&#39;) DO command [command-parameters]</span><br></pre></td></tr></table></figure><p>其中file-set为一个或多个文件名。for 语句会逐一分析指定的每个文件，打开指定文件、读取并处理文件内容。处理包括读取文件内容，将文件内容逐行读取，然后将每行解析成零或更多的符号（默认使用空格作为分隔符）。</p></li></ul><p>  例如</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; test.txt</span><br><span class="line">姓名年龄 成绩</span><br><span class="line">张三1098</span><br><span class="line">李四1189</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; test.bat</span><br><span class="line">@echo off</span><br><span class="line">for &#x2F;F %%I in (test.txt) do (</span><br><span class="line">echo %%I</span><br><span class="line">)</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">姓名</span><br><span class="line">张三</span><br><span class="line">李四</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 解析：在for循环中，逐行读取test.txt文件中的内容。默认使用空格做分割，然后将分割后的值显示。（这里被分割后只剩每行的第一列了）</span><br></pre></td></tr></table></figure><ul><li><h4 id="eol"><a href="#eol" class="headerlink" title="eol=#"></a>eol=#</h4><p>指定读取到的以 <code>#</code> 开头的行为注释行，忽略不进行处理</p></li><li><h4 id="skip-n"><a href="#skip-n" class="headerlink" title="skip=n"></a>skip=n</h4><p>指定在for语句解析每个文件时，从文件头部跳过的行数</p></li><li><h4 id="delims-xxx"><a href="#delims-xxx" class="headerlink" title="delims=xxx"></a>delims=xxx</h4><p>指定分隔符号集，替换for语句默认的空格和制表符。</p></li><li><h4 id="tokens-x-y-m-n"><a href="#tokens-x-y-m-n" class="headerlink" title="tokens=x,y,m-n"></a>tokens=x,y,m-n</h4><ul><li>tokens=m 表示提取第m列；</li><li>tokens=m,n 表示提取第m列和第n列；</li><li>tokens=m-n 表示提取第m列至第n列；</li><li>tokens=* 忽略行首的所有空格；</li><li>tokens=m* 提取第m列以后的所有字符，星号表示剩余的字符；</li></ul></li></ul><p>  例如</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;f &quot;delims&#x3D; skip&#x3D;1&quot; %%I in (&#39;dir &#x2F;a test* &#x2F;b&#39;) do echo &quot;%%I&quot;</span><br></pre></td></tr></table></figure><p>  找出所有以 <code>test</code> 开头的文件，并输入其文件名。</p><p>  <code>delims= skip=1</code> 将文件名含空格的仍作为一个整体</p><p>  输出为：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;test 1.txt&quot;</span><br><span class="line">&quot;test 2.txt&quot;</span><br><span class="line">&quot;test test .txt&quot;</span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:funtion_name</span><br><span class="line">your code</span><br><span class="line">exit &#x2F;b 0</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:count</span><br><span class="line">set &#x2F;a num+&#x3D;1</span><br><span class="line">if %num%&#x3D;&#x3D;100 echo 循环到100次了</span><br><span class="line">goto count</span><br></pre></td></tr></table></figure><p>定义了一个名为 <code>count</code>  的函数，其功能为每调用一次该函数，<code>num</code> 的值都 <code>+1</code> ，然后继续调用该函数。形成一个无限循环。</p><h2 id="5-goto"><a href="#5-goto" class="headerlink" title="5.goto"></a>5.goto</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">goto function_name</span><br></pre></td></tr></table></figure><p>跳转到某个函数中去执行</p><h2 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6.逻辑运算符"></a>6.逻辑运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AND逻辑和</span><br><span class="line">OR逻辑或</span><br><span class="line">NOT逻辑非</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试图片是否正常显示</title>
      <link href="posts/b8c4/"/>
      <url>posts/b8c4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><span id="more"></span><p>测试一个图片而已啦!</p><p>献上 这是我的六花O(∩_∩)O</p><img src= "/img/loading.gif" data-lazy-src="/posts/b8c4/latest" class="" title="Rikka Takanashi | Heroes Wiki | Fandom"><p>【附加】</p><ul><li><p>文章中图片的上传问题</p><blockquote><p> 如果文章中的图片都是上传图床的话，可能会不是很稳定，整理也相对繁琐。为了保证万无一失，图片最好全都保存在本地文件夹中。</p><p>但是，每次写文章的时候还要同时管理图片的保存、路径等，增加了创作成本。</p></blockquote><p>有没有一种方法能够自动保存md中的图片文件到指定的目录去呢？ 当然是有的！</p><p><code>typora</code> 编辑器自带这个功能，设置界面如下图：</p><img src= "/img/loading.gif" data-lazy-src="/posts/b8c4/typora%E5%9B%BE%E5%83%8F%E8%AE%BE%E7%BD%AE.png" class="" title="typora图像设置"><p>其意思就是，当md中插入图片时，自动将图片复制到同目录下的同名文件夹中。这样便省去了手动管理图片，感觉轻松了不少呢！</p><hr><p>问题又来了，怎么让文章中的图片定位到正确的位置呢？</p><p>首先，将 <code>_config.yml</code> 文件中 <code>post_asset_folder</code> 的值改为 <code>true</code></p><p>其次，安装插件 <code>npm install hexo-image-link --save</code> ，其作用是在渲染文章前将Markdown语法的图片路径转换为asset_img的方式，以实现在编辑器中和发布后图片都能正常显示。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 六花 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算相关操作</title>
      <link href="posts/e685/"/>
      <url>posts/e685/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p>这几天做到一些算法题，虽说用笨方法也可以做出来，但是强迫症看着执行用时那里怪难受的，于是翻来大佬的解题方法，于是发现了位运算的神奇用法。</p><p>在网上搜索了一下，本来想把这些用法直接注释在代码中，但是又觉得不方便查找，所以就先写在这里吧。</p><h3 id="1-位运算概述"><a href="#1-位运算概述" class="headerlink" title="1.位运算概述"></a>1.位运算概述</h3><p>  计算机中所有的数据都是以二进制存储的，计算机对二进制的运算（+,-,*,/）都是用的位运算。即先用位运算计算出二进制结果，再将结果转换为其他进制，比如十进制。</p><h3 id="2-位运算符号"><a href="#2-位运算符号" class="headerlink" title="2.位运算符号"></a>2.位运算符号</h3><table><thead><tr><th>符号</th><th>名称</th><th align="left">运算规则</th></tr></thead><tbody><tr><td>&amp;</td><td>与</td><td align="left">同为1，才为1</td></tr><tr><td>|</td><td>或</td><td align="left">有1，就为1</td></tr><tr><td>^</td><td>异或</td><td align="left">相同为0，不同为1</td></tr><tr><td>~</td><td>取反</td><td align="left">0为1,1为0</td></tr><tr><td>&lt;&lt;</td><td>左移</td><td align="left">二进制为左移若干位，高位丢弃，低位补0</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td align="left">二进制位右移若干位，无符号数：高位补0.有符号数：看情况。</td></tr></tbody></table><h3 id="3-详细内容"><a href="#3-详细内容" class="headerlink" title="3.详细内容"></a>3.详细内容</h3><h5 id="1-与（-amp-）"><a href="#1-与（-amp-）" class="headerlink" title="1.与（&amp;）"></a>1.与（&amp;）</h5><blockquote><p>运算规则： 0&amp;0=0 　0&amp;1=0　  1&amp;0=0 　 1&amp;1=1</p></blockquote><p>注意：负数按补码形式参与操作<br>用途：</p><ul><li><p>清零：<br>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p></li><li><p>取一个数的指定位：<br>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p></li><li><p>判断奇偶<br>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用if ((a &amp; 1) == 0)代替if (a % 2 == 0)来判断a是不是偶数。</p></li></ul><p>取余的更快操作：<strong>a % 2^n == a &amp; ( (2^n) - 1 )</strong></p><h5 id="2-或（-）"><a href="#2-或（-）" class="headerlink" title="2.或（|）"></a>2.或（|）</h5><blockquote><p>运算规则： 0|0=0 　 0|1=1 　 1|0=1 　 1|1=1</p></blockquote><p>用途：</p><ul><li>对数据的某位置1<br>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。</li></ul><h5 id="3-异或（-）"><a href="#3-异或（-）" class="headerlink" title="3.异或（^）"></a>3.异或（^）</h5><blockquote><p>运算规则： 0^0=0 　 0^1=1 　 1^0=1  　1^1=0</p></blockquote><ul><li><p>翻转指定位<br>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p></li><li><p>与0相异或值不变<br>例如：1010 1110 ^ 0000 0000 = 1010 1110</p></li><li><p>交换两个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a != b)&#123;</span><br><span class="line">        a ^= b;</span><br><span class="line">        b ^= a;</span><br><span class="line">        a ^= b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="4-取反（-）"><a href="#4-取反（-）" class="headerlink" title="4.取反（~）"></a>4.取反（~）</h5><blockquote><p>运算规则：~0=1 　~1=0</p></blockquote><p>用途：</p><ul><li>使一个数的最低位为0<br>使a的最低位为0，可以表示为：a &amp; ~ 1。~1的值为 1111 1111 1111 1110，再按”与”运算，最低位一定为0。因为“ ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</li></ul><h5 id="5-左移（-lt-lt-）"><a href="#5-左移（-lt-lt-）" class="headerlink" title="5.左移（&lt;&lt;）"></a>5.左移（&lt;&lt;）</h5><blockquote><p>运算规则： 将一个二进制位左移若干位，高位丢弃，低位补0</p></blockquote><p>例如： a=1010 1011，a = a&lt;&lt; 2，a=1010 1100。</p><p><strong>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</strong></p><h5 id="6-右移（-gt-gt-）"><a href="#6-右移（-gt-gt-）" class="headerlink" title="6.右移（&gt;&gt;）"></a>6.右移（&gt;&gt;）</h5><blockquote><p>运算规则： 将一个二进制位右移若干位，正数高位补0，负数高位补1，低位丢弃</p></blockquote><p>例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。<br><strong>操作数每右移一位，相当于该数除以2。</strong></p><blockquote><p>参考：<a href="https://www.cnblogs.com/yrjns/p/11246163.html">https://www.cnblogs.com/yrjns/p/11246163.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 效率 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
